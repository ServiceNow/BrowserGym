syntax = "proto3";

package pb.process_discovery;

import "common/user_profile.proto";
import "google/protobuf/timestamp.proto";
import "pb/process_discovery/dataset.proto";

option go_package = "github.com/orby-ai-engineering/web-api-server/pb/process_discovery";

// A process is a collection of step types, step nodes, and observations.
message Process {
  // The id of the process
  string id = 1;
  // The name of the process
  string name = 2;
  // The description of the process
  string description = 3;

  // A global list of step types used by this process
  // (could be system-defined or user-defined).
  repeated StepType step_types = 4;

  // A global list of StepNodes. Each StepNode references exactly one StepType.
  // The structure of step nodes can be a tree (no merges) or a graph (with merges).
  // The first node in the list is a special "Start" node.
  repeated StepNode step_nodes = 5;

  // A list of instances of this process
  repeated ProcessInstance process_instances = 6;

  // The creation time of the process
  google.protobuf.Timestamp create_time = 7;
  // The last updated timestamp of the process
  google.protobuf.Timestamp last_updated_time = 8;
}

// A step node is a node in the tree/graph structure of the process.
message StepNode {
  // Unique ID for this node, useful for recursive reference
  string id = 1;

  // The StepType that this node references.
  // Must match one of the StepType.id in the same Process.
  string step_type_id = 2;

  // For a tree approach, each node can have multiple child transitions
  // leading to different branches. This can also form a graph
  // if a step_node_id references an existing node.
  repeated Transition transitions = 3;
}

// A transition from this node to a child node, plus optional branching condition or metrics.
message Transition {
  // The id of the child node
  string step_node_id = 1;

  // A branching condition for a child transition (e.g., “priority == HIGH”)
  message BranchCondition {
    // The expression for the branching condition
    string expression = 1;
    // TODO: Other fields for branching logic
  }
  BranchCondition branch_condition = 2;
}

// A single instance of a process.
message ProcessInstance {
  // The id of the execution
  string id = 1;

  // The user that executed this path
  common.UserProfileInfo user = 2;

  // The actual observations of each step node in the path
  repeated StepNodeInstance step_node_instances = 3;

  // The attributes of the execution
  map<string, AttributeValue> attributes = 4;
}

// A single instance of a step node in a process instance.
message StepNodeInstance {
  // The id of the step node
  string step_node_id = 1;

  // The attributes of the step node observation
  map<string, AttributeValue> attributes = 2;

  // The observations of the step node execution, including actions descriptions, screenshots, etc.
  // for the "Documentation" feature, also helpful for viewing
  // the actions inside a step node execution.
  repeated Observation observations = 3;
}
