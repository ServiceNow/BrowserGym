syntax = "proto3";

package pb.v1alpha1;

import "pb/v1alpha1/orbot_workflow.proto";
import "pb/v1alpha1/orbot_action.proto";

option go_package = "github.com/orby-ai-engineering/web-api-server/pb/v1alpha1";

service ExecutionService {
  // Creates a new execution in the execution collection. This is different from the workflow execution service in v1alpha2 which uses the execution_view, 
  // that will be migrated to the execution collection soon.
  // As of today (2025-01-20) it's only being used by Orbot.
  rpc CreateExecution(CreateExecutionRequest)
    returns (CreateExecutionResponse) {}
}

// This api request should only be used for creating the first execution in a workflow ran by the user.
// Hence we may not need to send in the process_id and by default it will use the first process_id from the workflow.
// All the subsequent executions will be created by the node executor workflow.
message CreateExecutionRequest {
  string workflow_id = 1;
  // Since a user creates an execution, we need to know from which connection the request is initiated.
  // Only a user can create an execution from an API request.
  // The UserId can be fetched from the request metadata.
  // We may need to revisit this once we unify both Orby and Orbot executions.
  string connection_id = 2;
  repeated WorkflowVariable variables = 4;
}

message CreateExecutionResponse {
  WorkflowTask execution = 1;
}
